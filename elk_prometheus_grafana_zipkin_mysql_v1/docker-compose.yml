version: '3.7'
services:

  #----------------------------------------------------------------------------------------
  elasticsearch:
    env_file: .env
    container_name: elasticsearch
    image: elasticsearch:${GENERAL_STACK_VERSION}
    ports:
      - ${ELASTICSEARCH_PORT_1}:9200
      - ${ELASTICSEARCH_PORT_2}:9300
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: false
      - type: bind
        source: ./elasticsearch/data
        target: /usr/share/elasticsearch/data
        read_only: false
    environment:
      ELASTIC_VERSION: ${GENERAL_STACK_VERSION}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      KIBANA_USERNAME: ${KIBANA_SYSTEM_USERNAME}
      KIBANA_SYSTEM_USERNAME: ${KIBANA_SYSTEM_USERNAME}
      LOGSTASH_INTERNAL_USERNAME: ${LOGSTASH_INTERNAL_USERNAME}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD}
      ES_JAVA_OPTS: ${ELASTICSEARCH_JAVA_OPTS}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - default
      - elk_prometheus_grafana_zipkin_mysql_v1_open_network
  #----------------------------------------------------------------------------------------
  logstash:
    env_file: .env
    container_name: logstash
    image: logstash:${GENERAL_STACK_VERSION}
    ports:
      - ${LOGSTASH_PORT_HTTP}:8080
      - ${LOGSTASH_PORT_1}:5044
      - ${LOGSTASH_PORT_2}:9600
      - ${LOGSTASH_TCP_PORT}:5000/tcp
      - ${LOGSTASH_UDP_PORT}:5000/udp
    volumes:
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: false
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: false
      - type: bind
        source: ./logstash/script/logstash-reload.sh
        target: /home/logstash/logstash-reload.sh
        read_only: false
    environment:
      ELASTIC_VERSION: ${GENERAL_STACK_VERSION}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD}
      LS_JAVA_OPTS: ${LOGSTASH_JAVA_OPTS}
    depends_on:
      - elasticsearch
    networks:
      - default
      - elk_prometheus_grafana_zipkin_mysql_v1_open_network
  #----------------------------------------------------------------------------------------
  kibana:
    env_file: .env
    container_name: kibana
    image: kibana:${GENERAL_STACK_VERSION}
    ports:
      - ${KIBANA_PORT}:5601
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: false
    environment:
      ELASTIC_VERSION: ${GENERAL_STACK_VERSION}
      ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HTTP_HOSTS}
      ELASTICSEARCH_USERNAME: ${ELASTIC_USERNAME}
      KIBANA_PASSWORD: ${KIBANA_PASSWORD}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD}
    depends_on:
      - elasticsearch
    networks:
      - default
      - elk_prometheus_grafana_zipkin_mysql_v1_open_network
  #----------------------------------------------------------------------------------------
  prometheus:
    env_file: .env
    container_name: prometheus
    image: prom/prometheus
    ports:
      - ${PROMETHEUS_PORT}:9090
    working_dir: /home/prometheus
    volumes:
      - type: bind
        source: ./prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: false
      - type: bind
        source: ./prometheus/targets/
        target: /home/prometheus/targets
        read_only: false
      - type: bind
        source: ./prometheus/script/prometheus-reload.sh
        target: /home/prometheus/prometheus-reload.sh
        read_only: false
    tty: true
    networks:
      - default
      - elk_prometheus_grafana_zipkin_mysql_v1_open_network
  #----------------------------------------------------------------------------------------
  zipkin:
    env_file: .env
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - ${ZIPKIN_PORT}:9411
    volumes:
      - type: bind
        source: ./zipkin/
        target: /home/zipkin
        read_only: false
    environment:
      STORAGE_TYPE: ${ZIPKIN_STORAGE_TYPE}
      SEARCH_ENABLED: ${ZIPKIN_SEARCH_ENABLED}
      #ES_HTTP_LOGGING: ${ZIPKIN_HTTP_LOGGING}
      ES_USERNAME: ${ELASTIC_USERNAME}
      ES_PASSWORD: ${ELASTIC_PASSWORD}
      ES_HOSTS: ${ELASTICSEARCH_HTTP_HOSTS}
      ES_SSL_NO_VERIFY: ${SECURITY_ZIPKIN_NO_SSL_CHECK}
    depends_on:
      - elasticsearch
    networks:
      - default
      - elk_prometheus_grafana_zipkin_mysql_v1_open_network
  #----------------------------------------------------------------------------------------
  grafana:
    env_file: .env
    container_name: grafana
    image: grafana/grafana
    ports:
      - ${GRAFANA_PORT}:3000
    volumes:
      - type: bind
        source: ./grafana
        target: /home/grafana/
        read_only: false
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      #GF_AWS_PROFILES: ${GRAFANA_AWS_PROFILE}
      #GF_AWS_default_ACCESS_KEY_ID: ${GRAFANA_AWS_ACCESS_KEY_ID}
      #GF_AWS_default_SECRET_ACCESS_KEY: ${GRAFANA_AWS_SECRET_KEY}
      #GF_AWS_default_REGION: ${GRAFANA_AWS_REGION}
    tty: true
    networks:
      - default
      - elk_prometheus_grafana_zipkin_mysql_v1_open_network
  #----------------------------------------------------------------------------------------
  grafana-ubuntu:
    env_file: .env
    container_name: grafana-ubuntu
    image: grafana/grafana-enterprise:8.4.6-ubuntu
    ports:
      - ${GRAFANA_UBUNTU_PORT}:3000
    volumes:
      - type: bind
        source: ./grafana-ubuntu
        target: /home/grafana/
        read_only: false
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      #GF_AWS_PROFILES: ${GRAFANA_AWS_PROFILE}
      #GF_AWS_default_ACCESS_KEY_ID: ${GRAFANA_AWS_ACCESS_KEY_ID}
      #GF_AWS_default_SECRET_ACCESS_KEY: ${GRAFANA_AWS_SECRET_KEY}
      #GF_AWS_default_REGION: ${GRAFANA_AWS_REGION}
    tty: true
    networks:
      - default
      - elk_prometheus_grafana_zipkin_mysql_v1_open_network
  #----------------------------------------------------------------------------------------
  mysql-80:
    image: mysql:8.0
    container_name: mysql80
    ports:
      - ${MYSQL80_PORT}:3306
    volumes:
      - "./mysql-80:/var/lib/mysql/"
    environment:
      MYSQL_DATABASE: ${MYSQL80_DATABASE}
      MYSQL_USERNAME: ${MYSQL80_USERNAME}
      MYSQL_PASSWORD: ${MYSQL80_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL80_ROOT_PASSWORD}
    networks:
      - default
      - elk_prometheus_grafana_zipkin_mysql_v1_open_network
  #----------------------------------------------------------------------------------------
  mysql-57:
    image: mysql:5.7
    container_name: mysql57
    ports:
      - ${MYSQL57_PORT}:3306
    volumes:
      - "./mysql-57:/var/lib/mysql/"
    environment:
      MYSQL_DATABASE: ${MYSQL57_DATABASE}
      MYSQL_USERNAME: ${MYSQL57_USERNAME}
      MYSQL_PASSWORD: ${MYSQL57_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL57_ROOT_PASSWORD}
    networks:
      - default
      - elk_prometheus_grafana_zipkin_mysql_v1_open_network
  #----------------------------------------------------------------------------------------
  ec2-service-discovery:
    env_file: .env
    container_name: ec2-service-discovery
    build:
      context: .
      dockerfile: ./ec2/ec2-service-discovery.dockerfile
    ports:
      - ${SERVICE_DISCOVERY_PORT}:${SERVICE_DISCOVERY_PORT}
    privileged: true
    tty: true
    volumes:
      - ./ec2/app/service-discovery/:/home/ec2/app/
    networks:
      - default
      - elk_prometheus_grafana_zipkin_mysql_v1_open_network
    command: "/usr/bin/java -jar /home/ec2/app/SERVICE-DISCOVERY-0.0.1-SNAPSHOT.jar --spring.config.location=/home/ec2/app/application.properties"
  #----------------------------------------------------------------------------------------
  ec2-api-gateway:
    env_file: .env
    container_name: ec2-api-gateway
    build:
      context: .
      dockerfile: ./ec2/ec2-api-gateway.dockerfile
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
      - ${API_GATEWAY_HEALTH_PORT}:${API_GATEWAY_HEALTH_PORT}
    privileged: true
    tty: true
    volumes:
      - ./ec2/app/api-gateway/:/home/ec2/app/
    networks:
      - default
      - elk_prometheus_grafana_zipkin_mysql_v1_open_network
    depends_on:
      - ec2-service-discovery
    links:
      - ec2-service-discovery
    command: "/usr/bin/java -jar /home/ec2/app/API-GATEWAY-0.0.1-SNAPSHOT.jar --spring.config.location=/home/ec2/app/application.properties"
  #----------------------------------------------------------------------------------------
  ec2-client:
    env_file: .env
    container_name: ec2-client
    build:
      context: .
      dockerfile: ./ec2/ec2-client.dockerfile
    ports:
      - ${CLIENT_PORT}:${CLIENT_PORT}
    privileged: true
    tty: true
    volumes:
      - ./ec2/app/client-demo/:/home/ec2/app/
    networks:
      - default
      - elk_prometheus_grafana_zipkin_mysql_v1_open_network
    depends_on:
      - ec2-service-discovery
    links:
      - ec2-service-discovery
    command: "/usr/bin/java -jar /home/ec2/app/CLIENT-DEMO-0.0.1-SNAPSHOT.jar --spring.config.location=/home/ec2/app/application.properties"
  #----------------------------------------------------------------------------------------
  ec2-microservice-order:
    env_file: .env
    container_name: ec2-microservice-order
    build:
      context: .
      dockerfile: ./ec2/ec2-microservice-order.dockerfile
    ports:
      - ${MICROSERVICE_ORDER_PORT}:${MICROSERVICE_ORDER_PORT}
    privileged: true
    tty: true
    volumes:
      - ./ec2/app/microservice-order/:/home/ec2/app/
    networks:
      - default
      - elk_prometheus_grafana_zipkin_mysql_v1_open_network
    depends_on:
      - ec2-service-discovery
      - mysql-57
      - mysql-80
    links:
      - ec2-service-discovery
      - mysql-57
      - mysql-80
    command: "/usr/bin/java -jar /home/ec2/app/ORDER-DEMO-0.0.1-SNAPSHOT.jar --spring.config.location=/home/ec2/app/application.properties"
  #----------------------------------------------------------------------------------------
  ec2-microservice-product:
    env_file: .env
    container_name: ec2-microservice-product
    build:
      context: .
      dockerfile: ./ec2/ec2-microservice-product.dockerfile
    ports:
      - ${MICROSERVICE_PRODUCT_PORT}:${MICROSERVICE_PRODUCT_PORT}
    privileged: true
    tty: true
    volumes:
      - ./ec2/app/microservice-product/:/home/ec2/app/
    networks:
      - default
      - elk_prometheus_grafana_zipkin_mysql_v1_open_network
    depends_on:
      - ec2-service-discovery
      - mysql-57
      - mysql-80
    links:
      - ec2-service-discovery
      - mysql-57
      - mysql-80
    command: "/usr/bin/java -jar /home/ec2/app/PRODUCT-DEMO-0.0.1-SNAPSHOT.jar --spring.config.location=/home/ec2/app/application.properties"
  #----------------------------------------------------------------------------------------

volumes:
  elasticsearch:

networks:
  elk_prometheus_grafana_zipkin_mysql_v1_open_network:
    external: true

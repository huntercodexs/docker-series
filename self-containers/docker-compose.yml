version: "3.7"
services:

  #----------------------------------------------------------------------------------------
  elasticsearch:
    env_file: .env
    container_name: elasticsearch
    image: elasticsearch:${GENERAL_STACK_VERSION}
    ports:
      - ${ELASTICSEARCH_PORT_1}:9200
      - ${ELASTICSEARCH_PORT_2}:9300
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: bind
        source: elasticsearch
        target: /usr/share/elasticsearch/data
        read_only: false
    environment:
      ELASTIC_VERSION: ${GENERAL_STACK_VERSION}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      KIBANA_USERNAME: ${KIBANA_SYSTEM_USERNAME}
      KIBANA_SYSTEM_USERNAME: ${KIBANA_SYSTEM_USERNAME}
      LOGSTASH_INTERNAL_USERNAME: ${LOGSTASH_INTERNAL_USERNAME}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD}
      ES_JAVA_OPTS: ${ELASTICSEARCH_JAVA_OPTS}
    ulimits:
      memlock:
        soft: -1
        hard: -1
  #----------------------------------------------------------------------------------------
  kibana:
    env_file: .env
    container_name: kibana
    image: kibana:${GENERAL_STACK_VERSION}
    ports:
      - ${KIBANA_PORT}:5601
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    environment:
      ELASTIC_VERSION: ${GENERAL_STACK_VERSION}
      ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HTTP_HOSTS}
      ELASTICSEARCH_USERNAME: ${ELASTIC_USERNAME}
      KIBANA_PASSWORD: ${KIBANA_PASSWORD}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD}
    depends_on:
      - elasticsearch
  #----------------------------------------------------------------------------------------
  logstash:
    env_file: .env
    container_name: logstash
    image: logstash:${GENERAL_STACK_VERSION}
    ports:
      - ${LOGSTASH_PORT_HTTP}:8080
      - ${LOGSTASH_PORT_1}:5044
      - ${LOGSTASH_PORT_2}:9600
      - ${LOGSTASH_TCP_PORT}:5000/tcp
      - ${LOGSTASH_UDP_PORT}:5000/udp
    volumes:
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
    environment:
      ELASTIC_VERSION: ${GENERAL_STACK_VERSION}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD}
      LS_JAVA_OPTS: ${LOGSTASH_JAVA_OPTS}
    depends_on:
      - elasticsearch
  #----------------------------------------------------------------------------------------
  zipkin:
    env_file: .env
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - ${ZIPKIN_PORT}:9411
    volumes:
      - type: bind
        source: ./zipkin/
        target: /home/zipkin
        read_only: false
    environment:
      STORAGE_TYPE: ${ZIPKIN_STORAGE_TYPE}
      SEARCH_ENABLED: ${ZIPKIN_SEARCH_ENABLED}
      #ES_HTTP_LOGGING: ${ZIPKIN_HTTP_LOGGING}
      ES_USERNAME: ${ELASTIC_USERNAME}
      ES_PASSWORD: ${ELASTIC_PASSWORD}
      ES_HOSTS: ${ELASTICSEARCH_HTTP_HOSTS}
      ES_SSL_NO_VERIFY: ${SECURITY_ZIPKIN_NO_SSL_CHECK}
    depends_on:
      - elasticsearch
  #----------------------------------------------------------------------------------------
  grafana:
    env_file: .env
    container_name: grafana
    image: grafana/grafana
    ports:
      - ${GRAFANA_PORT}:3000
    volumes:
      - type: bind
        source: ./grafana
        target: /home/grafana/
        read_only: true
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      #GF_AWS_PROFILES: ${GRAFANA_AWS_PROFILE}
      #GF_AWS_default_ACCESS_KEY_ID: ${GRAFANA_AWS_ACCESS_KEY_ID}
      #GF_AWS_default_SECRET_ACCESS_KEY: ${GRAFANA_AWS_SECRET_KEY}
      #GF_AWS_default_REGION: ${GRAFANA_AWS_REGION}
    tty: true
  #----------------------------------------------------------------------------------------
  grafana-ubuntu:
    env_file: .env
    container_name: grafana-ubuntu
    image: grafana/grafana-enterprise:8.4.6-ubuntu
    ports:
      - ${GRAFANA_UBUNTU_PORT}:3000
    volumes:
      - type: bind
        source: ./grafana-ubuntu
        target: /home/grafana/
        read_only: true
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      #GF_AWS_PROFILES: ${GRAFANA_AWS_PROFILE}
      #GF_AWS_default_ACCESS_KEY_ID: ${GRAFANA_AWS_ACCESS_KEY_ID}
      #GF_AWS_default_SECRET_ACCESS_KEY: ${GRAFANA_AWS_SECRET_KEY}
      #GF_AWS_default_REGION: ${GRAFANA_AWS_REGION}
    tty: true
  #----------------------------------------------------------------------------------------
  prometheus:
    env_file: .env
    container_name: prometheus
    image: prom/prometheus
    ports:
      - ${PROMETHEUS_PORT}:9090
    volumes:
      - type: bind
        source: ./prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
    tty: true
  #----------------------------------------------------------------------------------------
  openjdk-8u212:
    image: openjdk:8u212
    container_name: openjdk-8u212
    #build: ./java/openjdk-8u212/dockerfile/
    ports:
      - "31899:8080"
    #volumes:
    #  - "./java/openjdk-8u212/:/etc/openjdk-8u212/"
    #    links:
    #      - mysql-80
    tty: true
  #----------------------------------------------------------------------------------------
  ubuntu-2004:
    image: ubuntu:20.04
    container_name: ubuntu-2004
#    build: ./ubuntu-2004/dockerfile/
    ports:
      - "8581:80"
    volumes:
      - "./ubuntu-2004/:/home/ubuntu/"
    links:
      - mysql-80
    tty: true
  #----------------------------------------------------------------------------------------
  ubuntu-1804:
    image: ubuntu:18.04
    container_name: ubuntu-1804
#    build: ./ubuntu-1804/dockerfile/
    ports:
      - "8580:80"
      - "3806:3306"
    volumes:
      - "./ubuntu-1804/:/home/ubuntu/"
    links:
      - mysql-57
    tty: true
  #----------------------------------------------------------------------------------------
#  oracle:
#    container_name: oracle
#    #Tem que usar um build para fazer login no docker hub
#    #        image: store/oracle/database-enterprise:12.2.0.1
#    privileged: true
#    ports:
#      - "1521:1521"
#      - "5500:5500"
#    networks:
#      - default
#      - dockerized_default
#    #        environment:
#    #            -
#    volumes:
#      - ./projects/oracle/oracleData/enterprise/:/opt/oracle/oradata/
#    #            - ./projects/oracle/init.sql:/docker-entrypoint-initdb.d/10-init.sql
#    build: ./projects/oracle
##        command:
##            - docker login
  #----------------------------------------------------------------------------------------
  redis:
    env_file: .env
    container_name: redis
    build:
      context: ./redis
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - type: bind
        source: ./redis/data
        target: /data/
        read_only: false
      - type: bind
        source: ./redis/redis.conf
        target: /etc/redis/redis.conf
        read_only: false
    command: redis-server --requirepass 123@Mudar#
    tty: true
  #-----------------------------------------------------------------------------------------
  mongo:
    env_file: .env
    container_name: mongo
    image: mongo
    ports:
      - ${MONGO_PORT}:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - type: bind
        source: ./mongo/MongoDB
        target: /data/db/
        read_only: false
      - type: bind
        source: ./mongo/mongod.conf
        target: /etc/mongod.conf
        read_only: false
    tty: true
  #----------------------------------------------------------------------------------------
  # Run this service manually in case of error or exception
  mongo-express:
    env_file: .env
    container_name: mongo-express
    image: mongo-express
    ports:
      - ${MONGO_EXPRESS_PORT}:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: ${MONGO_EXPRESS_SERVER_DRIVER}
      ME_CONFIG_MONGODB_PORT: ${MONGO_EXPRESS_SERVER_PORT}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_EXPRESS_SERVER_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_EXPRESS_SERVER_PASSWORD}
      ME_CONFIG_MONGODB_URL: ${MONGO_EXPRESS_SERVER_URL}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
    tty: true
    links:
      - mongo
    depends_on:
      - mongo
  #-----------------------------------------------------------------------------------------
  postgres:
    env_file: .env
    container_name: postgres
    image: postgres
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: GMT
    volumes:
      - type: bind
        source: ./postgres/PostgreSQL
        target: /var/lib/postgresql/data/
        read_only: false
    tty: true
  #----------------------------------------------------------------------------------------
  mssql:
    env_file: .env
    container_name: mssql
    image: mcr.microsoft.com/mssql/server:2019-latest
    ports:
      - ${MSSQL_PORT}:1433
    volumes:
      - type: bind
        source: ./mssql
        target: /var/lib/mssql/data/
        read_only: false
      - type: bind
        source: ./mssql/data
        target: /var/opt/mssql/data/
        read_only: false
    environment:
      SA_PASSWORD: ${MSSQL_SA_PASSWORD}
      MSSQL_SA_PASSWORD: ${MSSQL_SA_PASSWORD}
      ACCEPT_EULA: ${MSSQL_ACCEPT_EULA}
      MSSQL_PID: ${MSSQL_EDITION}
      TRUSTED_CONNECTION: ${MSSQL_TRUSTED_CONNECTION}
    tty: true
  #----------------------------------------------------------------------------------------
  mssql-tools:
    env_file: .env
    container_name: mssql-tools
    image:  mcr.microsoft.com/mssql-tools
    ports:
      - ${MSSQL_TOOLS_PORT}:10000
    tty: true
  #----------------------------------------------------------------------------------------
  mysql-80:
    image: mysql:8.0
    container_name: mysql80
    ports:
      - "3706:3306"
    volumes:
      - "./mysql-80:/var/lib/mysql/"
    environment:
      MYSQL_DATABASE: ${MYSQL80_DATABASE}
      MYSQL_USERNAME: ${MYSQL80_USERNAME}
      MYSQL_PASSWORD: ${MYSQL80_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL80_ROOT_PASSWORD}
  #----------------------------------------------------------------------------------------
  mysql-57:
    image: mysql:5.7
    container_name: mysql57
    ports:
      - ${MYSQL57_PORT}:3306
    volumes:
      - "./mysql-57:/var/lib/mysql/"
    environment:
      MYSQL_DATABASE: ${MYSQL57_DATABASE}
      MYSQL_USERNAME: ${MYSQL57_USERNAME}
      MYSQL_PASSWORD: ${MYSQL57_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL57_ROOT_PASSWORD}
  #----------------------------------------------------------------------------------------
  sqlite3:
    env_file: .env
    container_name: sqlite3
    build:
      context: ./sqlite3
    privileged: true
    ports:
      - ${SQLITE3_PORT}:5050
    volumes:
      - type: bind
        source: ./sqlite3/sqliteDB/sqlite-autoconf
        target: /data/sqlite3/
        read_only: false
      - type: bind
        source: ./sqlite3/sqliteDB/databases
        target: /root/db/
        read_only: false
    stdin_open: true
    tty: true
  #----------------------------------------------------------------------------------------

networks:
  self_containers_gateway:
    driver: bridge
  dev_gateway:
    external: true
#----------------------------------------------------------------------------------------
volumes:
  elasticsearch:
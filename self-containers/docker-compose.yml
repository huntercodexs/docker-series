version: "3.7"
services:
    
    #----------------------------------------------------------------------------------------
    #
    # NGINX WITH REVERSE PROXY (SAMPLE WITH TWO APPLICATIONS)
    # ==> IN PROGRESS
    #
    nginx-latest-unified:
        env_file: .env
        container_name: nginx-latest-unified
        image: nginx:latest
        privileged: true
        ports:
            - ${NGINX_REVERSE_PROXY_PORT1}:80
            - ${NGINX_REVERSE_PROXY_PORT2}:443
        volumes:
            - type: bind
              source: ./nginx/proxy/pages/404.html
              target: /var/www/html/404.html
              read_only: false
            - type: bind
              source: ./nginx/proxy/pages/index.html
              target: /var/www/html/index.html
              read_only: false
            - type: bind
              source: ./nginx/proxy/includes/
              target: /etc/nginx/includes/
              read_only: false
            - type: bind
              source: ./nginx/proxy/ssl/
              target: /etc/nginx/ssl/
              read_only: false
#            - type: bind
#              source: ./nginx/proxy/conf/default.conf
#              target: /etc/nginx/conf.d/default.conf
#              read_only: false
            - type: bind
              source: ./nginx/proxy/conf/nginx.conf
              target: /etc/nginx/nginx.conf
              read_only: false
            - type: bind
              source: ./nginx/proxy/favicon.ico
              target: /var/www/html/favicon.ico
              read_only: false
            #Apps test
            - type: bind
              source: ./app/reverse_proxy/app1
              target: /var/www/html/app1/
              read_only: false
            - type: bind
              source: ./app/reverse_proxy/app2
              target: /var/www/html/app2/
              read_only: false
        depends_on:
            - nginx-reverse-proxy-app1
            - nginx-reverse-proxy-app2
        links:
            - nginx-reverse-proxy-app1
            - nginx-reverse-proxy-app2
        networks:
            open_network:
            reverse_proxy:
                ipv4_address: 10.0.0.100
                
    nginx-reverse-proxy-app1:
        env_file: .env
        container_name: nginx-reverse-proxy-app1
        image: nginx:latest
        volumes:
            - type: bind
              source: ./app/reverse_proxy/app1
              target: /usr/share/nginx/html
              read_only: false
        networks:
            reverse_proxy:
                ipv4_address: 10.0.0.2
            
    nginx-reverse-proxy-app2:
        env_file: .env
        container_name: nginx-reverse-proxy-app2
        image: nginx:latest
        volumes:
            - type: bind
              source: ./app/reverse_proxy/app2
              target: /usr/share/nginx/html
              read_only: false
        networks:
            reverse_proxy:
                ipv4_address: 10.0.0.3
    #----------------------------------------------------------------------------------------
    # How to access (generic sample test): http://{SERVER-IP}:38081/generic/index.html
    # How to access (generic sample test): http://{SERVER-IP}:38081/app-name/sample/index.html
    nginx-latest-static:
        env_file: .env
        container_name: nginx-latest-static
        image: nginx:latest
        ports:
            - ${NGINX_STATIC_PORT}:80
        volumes:
            - type: bind
              source: ./app
              target: /usr/share/nginx/html
              read_only: false
    #----------------------------------------------------------------------------------------
    nginx-latest:
        env_file: .env
        container_name: nginx-latest
        image: nginx:latest
        privileged: true
        ports:
            - ${NGINX_PORT}:80
        environment:
            #ENVIRONEMT DETAILS
            PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
        volumes:
            - type: bind
              source: ./app/phphunter/
              target: /var/www/phphunter
              read_only: false
            - type: bind
              source: ./nginx/sample.nginx.conf
              target: /etc/nginx/nginx.conf
              read_only: true
            - type: bind
              source: ./nginx/sample.app.conf
              target: /etc/nginx/conf.d/default.conf
              read_only: true
        links:
            - php80
        depends_on:
            - php80
    #----------------------------------------------------------------------------------------
    php80:
        env_file: .env
        container_name: php80
        privileged: true
        environment:
            #ENVIRONEMT DETAILS
            PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
        volumes:
            - type: bind
              source: ./app/phphunter/
              target: /var/www/phphunter
              read_only: false
        build:
            context: ./php/80
            dockerfile: php80.dockerfile
    #----------------------------------------------------------------------------------------
    elasticsearch:
        env_file: .env
        container_name: elasticsearch
        image: elasticsearch:${GENERAL_STACK_VERSION}
        ports:
            - ${ELASTICSEARCH_PORT_1}:9200
            - ${ELASTICSEARCH_PORT_2}:9300
        volumes:
            - type: bind
              source: ./elasticsearch/config/elasticsearch.yml
              target: /usr/share/elasticsearch/config/elasticsearch.yml
              read_only: true
            - type: bind
              source: elasticsearch
              target: /usr/share/elasticsearch/data
              read_only: false
        environment:
            ELASTIC_VERSION: ${GENERAL_STACK_VERSION}
            ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
            KIBANA_USERNAME: ${KIBANA_SYSTEM_USERNAME}
            KIBANA_SYSTEM_USERNAME: ${KIBANA_SYSTEM_USERNAME}
            LOGSTASH_INTERNAL_USERNAME: ${LOGSTASH_INTERNAL_USERNAME}
            LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD}
            ES_JAVA_OPTS: ${ELASTICSEARCH_JAVA_OPTS}
        ulimits:
            memlock:
                soft: -1
                hard: -1
    #----------------------------------------------------------------------------------------
    kibana:
        env_file: .env
        container_name: kibana
        image: kibana:${GENERAL_STACK_VERSION}
        ports:
            - ${KIBANA_PORT}:5601
        volumes:
            - type: bind
              source: ./kibana/config/kibana.yml
              target: /usr/share/kibana/config/kibana.yml
              read_only: true
        environment:
            ELASTIC_VERSION: ${GENERAL_STACK_VERSION}
            ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HTTP_HOSTS}
            ELASTICSEARCH_USERNAME: ${ELASTIC_USERNAME}
            KIBANA_PASSWORD: ${KIBANA_PASSWORD}
            KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD}
        depends_on:
            - elasticsearch
    #----------------------------------------------------------------------------------------
    logstash:
        env_file: .env
        container_name: logstash
        image: logstash:${GENERAL_STACK_VERSION}
        ports:
            - ${LOGSTASH_PORT_HTTP}:8080
            - ${LOGSTASH_PORT_1}:5044
            - ${LOGSTASH_PORT_2}:9600
            - ${LOGSTASH_TCP_PORT}:5000/tcp
            - ${LOGSTASH_UDP_PORT}:5000/udp
        volumes:
            - type: bind
              source: ./logstash/pipeline
              target: /usr/share/logstash/pipeline
              read_only: true
            - type: bind
              source: ./logstash/config/logstash.yml
              target: /usr/share/logstash/config/logstash.yml
              read_only: true
        environment:
            ELASTIC_VERSION: ${GENERAL_STACK_VERSION}
            LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD}
            LS_JAVA_OPTS: ${LOGSTASH_JAVA_OPTS}
        depends_on:
            - elasticsearch
    #----------------------------------------------------------------------------------------
    zipkin:
        env_file: .env
        container_name: zipkin
        image: openzipkin/zipkin
        ports:
            - ${ZIPKIN_PORT}:9411
        volumes:
            - type: bind
              source: ./zipkin/
              target: /home/zipkin
              read_only: false
        environment:
            STORAGE_TYPE: ${ZIPKIN_STORAGE_TYPE}
            SEARCH_ENABLED: ${ZIPKIN_SEARCH_ENABLED}
            #ES_HTTP_LOGGING: ${ZIPKIN_HTTP_LOGGING}
            ES_USERNAME: ${ELASTIC_USERNAME}
            ES_PASSWORD: ${ELASTIC_PASSWORD}
            ES_HOSTS: ${ELASTICSEARCH_HTTP_HOSTS}
            ES_SSL_NO_VERIFY: ${SECURITY_ZIPKIN_NO_SSL_CHECK}
        depends_on:
            - elasticsearch
    #----------------------------------------------------------------------------------------
    grafana:
        env_file: .env
        container_name: grafana
        image: grafana/grafana
        ports:
            - ${GRAFANA_PORT}:3000
        volumes:
            - type: bind
              source: ./grafana
              target: /home/grafana/
              read_only: true
        environment:
            GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME}
            GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
            #GF_AWS_PROFILES: ${GRAFANA_AWS_PROFILE}
            #GF_AWS_default_ACCESS_KEY_ID: ${GRAFANA_AWS_ACCESS_KEY_ID}
            #GF_AWS_default_SECRET_ACCESS_KEY: ${GRAFANA_AWS_SECRET_KEY}
            #GF_AWS_default_REGION: ${GRAFANA_AWS_REGION}
        tty: true
    #----------------------------------------------------------------------------------------
    grafana-ubuntu:
        env_file: .env
        container_name: grafana-ubuntu
        image: grafana/grafana-enterprise:8.4.6-ubuntu
        ports:
            - ${GRAFANA_UBUNTU_PORT}:3000
        volumes:
            - type: bind
              source: ./grafana-ubuntu
              target: /home/grafana/
              read_only: true
        environment:
            GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME}
            GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
            #GF_AWS_PROFILES: ${GRAFANA_AWS_PROFILE}
            #GF_AWS_default_ACCESS_KEY_ID: ${GRAFANA_AWS_ACCESS_KEY_ID}
            #GF_AWS_default_SECRET_ACCESS_KEY: ${GRAFANA_AWS_SECRET_KEY}
            #GF_AWS_default_REGION: ${GRAFANA_AWS_REGION}
        tty: true
    #----------------------------------------------------------------------------------------
    prometheus:
        env_file: .env
        container_name: prometheus
        image: prom/prometheus
        ports:
            - ${PROMETHEUS_PORT}:9090
        volumes:
            - type: bind
              source: ./prometheus/prometheus.yml
              target: /etc/prometheus/prometheus.yml
              read_only: true
        tty: true
    #----------------------------------------------------------------------------------------
    #
    # NOTE: JUST WORK WITH JAR FILE !
    # After changes in the current project and generated jar file, copy it into docker container openjdk
    # and run the command "docker-compose up openjdk-8u212" to feature update
    #
    # or execute directly command as
    #   docker exec -it openjdk-8u212 java -jar /home/openjdk/simple-api-demo/SIMPLE-API-DEMO-22.01.1-SNAPSHOT.jar
    #
    # request sample: http://192.168.0.174:31890/api/simple-api-demo
    # response: OK, it is working fine !
    openjdk-8u212:
        env_file: .env
        image: openjdk:8u212
        container_name: openjdk-8u212
        ports:
            - "31890:31890"
        volumes:
            - type: bind
              source: ./java/simple-api-demo
              target: /home/openjdk/simple-api-demo
              read_only: false
        tty: true
        networks:
            - openjdk-net
        command: "java -jar /home/openjdk/simple-api-demo/SIMPLE-API-DEMO-22.01.1-SNAPSHOT.jar"
    #----------------------------------------------------------------------------------------
    ubuntu-2004:
        env_file: .env
        image: ubuntu:20.04
        container_name: ubuntu-2004
        #    build: ./ubuntu-2004/dockerfile/
        ports:
            - "8581:80"
        volumes:
            - "./ubuntu-2004/:/home/ubuntu/"
        links:
            - mysql-80
        tty: true
    #----------------------------------------------------------------------------------------
    ubuntu-1804:
        env_file: .env
        image: ubuntu:18.04
        container_name: ubuntu-1804
        #    build: ./ubuntu-1804/dockerfile/
        ports:
            - "8580:80"
            - "3806:3306"
        volumes:
            - "./ubuntu-1804/:/home/ubuntu/"
        links:
            - mysql-57
        tty: true
        networks:
            - self_containers_gateway
    #----------------------------------------------------------------------------------------
    #
    # NOTE: use the oracle_builder.sh in self-containers directory
    # command: ./oracle/oracle_build.sh
    #
    oracle-fake:
        env_file: .env
        container_name: oracle-fake
        image: alpine
    #----------------------------------------------------------------------------------------
    redis:
        env_file: .env
        container_name: redis
        build:
            context: ./redis
        ports:
            - ${REDIS_PORT}:6379
        volumes:
            - type: bind
              source: ./redis/data
              target: /data/
              read_only: false
            - type: bind
              source: ./redis/redis.conf
              target: /etc/redis/redis.conf
              read_only: false
        command: redis-server --requirepass ${REDIS_AUTH}
        tty: true
    #-----------------------------------------------------------------------------------------
    mongo:
        env_file: .env
        container_name: mongo
        image: mongo
        ports:
            - ${MONGO_PORT}:27017
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
        volumes:
            - type: bind
              source: ./mongo/MongoDB
              target: /data/db/
              read_only: false
            - type: bind
              source: ./mongo/mongod.conf
              target: /etc/mongod.conf
              read_only: false
        tty: true
    #----------------------------------------------------------------------------------------
    # Run this service manually in case of error or exception
    mongo-express:
        env_file: .env
        container_name: mongo-express
        image: mongo-express
        ports:
            - ${MONGO_EXPRESS_PORT}:8081
        environment:
            ME_CONFIG_MONGODB_SERVER: ${MONGO_EXPRESS_SERVER_DRIVER}
            ME_CONFIG_MONGODB_PORT: ${MONGO_EXPRESS_SERVER_PORT}
            ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_EXPRESS_SERVER_USERNAME}
            ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_EXPRESS_SERVER_PASSWORD}
            ME_CONFIG_MONGODB_URL: ${MONGO_EXPRESS_SERVER_URL}
            ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
            ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
        tty: true
        links:
            - mongo
        depends_on:
            - mongo
    #-----------------------------------------------------------------------------------------
    postgres:
        env_file: .env
        container_name: postgres
        image: postgres
        ports:
            - ${POSTGRES_PORT}:5432
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            TZ: GMT
        volumes:
            - type: bind
              source: ./postgres/PostgreSQL
              target: /var/lib/postgresql/data/
              read_only: false
        tty: true
    #----------------------------------------------------------------------------------------
    mssql:
        env_file: .env
        container_name: mssql
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
            - ${MSSQL_PORT}:1433
        volumes:
            - type: bind
              source: ./mssql
              target: /var/lib/mssql/data/
              read_only: false
            - type: bind
              source: ./mssql/data
              target: /var/opt/mssql/data/
              read_only: false
        environment:
            SA_PASSWORD: ${MSSQL_SA_PASSWORD}
            MSSQL_SA_PASSWORD: ${MSSQL_SA_PASSWORD}
            ACCEPT_EULA: ${MSSQL_ACCEPT_EULA}
            MSSQL_PID: ${MSSQL_EDITION}
            TRUSTED_CONNECTION: ${MSSQL_TRUSTED_CONNECTION}
        tty: true
    #----------------------------------------------------------------------------------------
    mssql-tools:
        env_file: .env
        container_name: mssql-tools
        image:  mcr.microsoft.com/mssql-tools
        ports:
            - ${MSSQL_TOOLS_PORT}:10000
        tty: true
    #----------------------------------------------------------------------------------------
    mysql-80:
        env_file: .env
        image: mysql:8.0
        container_name: mysql80
        ports:
            - "3706:3306"
        volumes:
            - "./mysql-80:/var/lib/mysql/"
        environment:
            MYSQL_DATABASE: ${MYSQL80_DATABASE}
            MYSQL_USERNAME: ${MYSQL80_USERNAME}
            MYSQL_PASSWORD: ${MYSQL80_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${MYSQL80_ROOT_PASSWORD}
    #----------------------------------------------------------------------------------------
    mysql-57:
        env_file: .env
        image: mysql:5.7
        container_name: mysql57
        ports:
            - ${MYSQL57_PORT}:3306
        volumes:
            - "./mysql-57:/var/lib/mysql/"
        environment:
            MYSQL_DATABASE: ${MYSQL57_DATABASE}
            MYSQL_USERNAME: ${MYSQL57_USERNAME}
            MYSQL_PASSWORD: ${MYSQL57_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${MYSQL57_ROOT_PASSWORD}
    #----------------------------------------------------------------------------------------
    sqlite3:
        env_file: .env
        container_name: sqlite3
        build:
            context: ./sqlite3
        privileged: true
        ports:
            - ${SQLITE3_PORT}:5050
        volumes:
            - type: bind
              source: ./sqlite3/sqliteDB/sqlite-autoconf
              target: /data/sqlite3/
              read_only: false
            - type: bind
              source: ./sqlite3/sqliteDB/databases
              target: /root/db/
              read_only: false
        stdin_open: true
        tty: true
    #----------------------------------------------------------------------------------------
    # After up container run the commands below:
    #   /usr/local/bin/python -m pip install --upgrade pip
    #   pip3 install flask
    #   pip3 install -U flask-cors
    #
    # GET http://192.168.0.174:35000/api/welcome
    # POST http://192.168.0.174:35000/api/article {"name": "Tester"}
    python3:
        env_file: .env
        image: python:3
        container_name: python3
        ports:
            - ${PYTHON3_PORT1}:5000
            - ${PYTHON3_PORT2}:8080
            - ${PYTHON3_PORT3}:31800
        volumes:
            - type: bind
              source: ./python3/pysimple
              target: /home/python3/pysimple
              read_only: false
#        links:
#            - mysql-57
#            - mysql-80
        tty: true
        networks:
            - open_network
    #----------------------------------------------------------------------------------------
    # docker network create open_network
    # npm init
    # npm install express --save
    # npm install -g npm@8.15.0
    # npm install -g nodemon
    nodejs:
        env_file: .env
        #image: node
        build:
            context: ./nodejs/app
            dockerfile: nodejs.dockerfile
        container_name: nodejs
        ports:
            - ${NODEJS_PORT1}:3000
            - ${NODEJS_PORT2}:8080
        volumes:
            - type: bind
              source: ./nodejs/app
              target: /home/nodejs/app
              read_only: false
            - type: bind
              source: ./nodejs/app/node_modules
              target: /home/nodejs/app/node_modules
              read_only: false
        tty: true
        networks:
            - open_network
    #----------------------------------------------------------------------------------------
    apache2:
        env_file: .env
        image: httpd
        container_name: apache2
        ports:
            - ${APACHE2_PORT}:80
        volumes:
            - type: bind
              source: ./apache2/web
              target: /usr/local/apache2/htdocs
              read_only: false
        tty: true
        networks:
            - open_network
    #----------------------------------------------------------------------------------------

networks:
    self_containers_gateway:
        driver: bridge
    open_network:
        external: true
    reverse_proxy:
        internal: true
        driver: bridge
        ipam:
            config:
                - subnet: 10.0.0.0/16
    openjdk-net:
        driver: bridge
#----------------------------------------------------------------------------------------
volumes:
    elasticsearch:
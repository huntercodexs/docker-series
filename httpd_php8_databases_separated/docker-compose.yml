version: "3.7"
services:
    
    #----------------------------------------------------------------------------------------
    webserver:
        env_file: .env
        image: httpd:2.4.54
        container_name: webserver
        ports:
            - ${WEBSERVER_PORT1}:80
            - ${WEBSERVER_PORT2}:443
        privileged: true
        volumes:
            - ./webserver/:/home/webserver/
            - ./applications/:/var/www/webserver/
        tty: true
        depends_on:
            - php8
        links:
            - php8
        networks:
            - webserver_network
    #----------------------------------------------------------------------------------------
    php8:
        env_file: .env
        container_name: php8
        build:
            context: ./php8
            dockerfile: php8.dockerfile
        ports:
            - ${PHP8_PORT}:9000
        volumes:
            - ./applications/:/var/www/webserver/
            - ./php8/shared/:/home/shared/
        networks:
            - webserver_network
    #----------------------------------------------------------------------------------------
    oraclelinux:
        env_file: .env
        container_name: oraclelinux
        build:
            context: ./oracle/database
            dockerfile: oraclelinux.dockerfile
            args:
                DB_EDITION: ${DB_EDITION}
                ORACLE_PASSWORD: ${ORACLE_PASSWORD}
        volumes:
            - ./oracle/share:/home/oracle/share
            - ./oracle/oradata:/opt/oracle/oradata
        ports:
            - ${ORACLE_PORT1}:1521
            - ${ORACLE_PORT2}:5500
        tty: true
        networks:
            - default
            - webserver_network
    #----------------------------------------------------------------------------------------
    mongo:
        env_file: .env
        container_name: mongo
        image: mongo
        ports:
            - ${MONGO_PORT}:27017
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
        volumes:
            - type: bind
              source: ./mongo/MongoDB
              target: /data/db/
              read_only: false
            - type: bind
              source: ./mongo/mongodb.conf
              target: /etc/mongodb.conf
              read_only: false
        tty: true
        networks:
            - default
            - webserver_network
    #----------------------------------------------------------------------------------------
    mongo-express:
        env_file: .env
        container_name: mongo-express
        image: mongo-express
        ports:
            - ${MONGO_EXPRESS_PORT}:8081
        environment:
            ME_CONFIG_MONGODB_SERVER: ${MONGO_EXPRESS_SERVER_DRIVER}
            ME_CONFIG_MONGODB_PORT: ${MONGO_EXPRESS_SERVER_PORT}
            ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_EXPRESS_SERVER_USERNAME}
            ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_EXPRESS_SERVER_PASSWORD}
            ME_CONFIG_MONGODB_URL: ${MONGO_EXPRESS_SERVER_URL}
            ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
            ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
        tty: true
        links:
            - mongo
        depends_on:
            - mongo
        networks:
            - default
            - webserver_network
    #-----------------------------------------------------------------------------------------
    postgres:
        env_file: .env
        container_name: postgres
        image: postgres
        ports:
            - ${POSTGRES_PORT}:5432
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            TZ: GMT
        volumes:
            - type: bind
              source: ./postgres/PostgresSQL
              target: /var/lib/postgresql/data/
              read_only: false
        tty: true
        networks:
            - default
            - webserver_network
    #----------------------------------------------------------------------------------------
    mssql:
        env_file: .env
        container_name: mssql
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
            - ${MSSQL_PORT}:1433
        volumes:
            - type: bind
              source: ./mssql
              target: /var/lib/mssql/data/
              read_only: false
            - type: bind
              source: ./mssql/data
              target: /var/opt/mssql/data/
              read_only: false
        environment:
            SA_PASSWORD: ${MSSQL_SA_PASSWORD}
            MSSQL_SA_PASSWORD: ${MSSQL_SA_PASSWORD}
            ACCEPT_EULA: ${MSSQL_ACCEPT_EULA}
            MSSQL_PID: ${MSSQL_EDITION}
            TRUSTED_CONNECTION: ${MSSQL_TRUSTED_CONNECTION}
        tty: true
        networks:
            - default
            - webserver_network
    #----------------------------------------------------------------------------------------
    mssql-tools:
        env_file: .env
        container_name: mssql-tools
        image:  mcr.microsoft.com/mssql-tools
        ports:
            - ${MSSQL_TOOLS_PORT}:10000
        tty: true
        networks:
            - default
            - webserver_network
    #----------------------------------------------------------------------------------------
    firebird:
        env_file: .env
        container_name: firebird
        privileged: true
        build:
            context: ./firebird
            dockerfile: firebird.dockerfile
            args:
                TZ: ${FIREBIRD_TIMEZONE}
                ISC_PASSWORD: ${FIREBIRD_ISC_PASSWORD}
                FIREBIRD_USER: ${FIREBIRD_USER}
                FIREBIRD_DBNAME: ${FIREBIRD_DBNAME}
        ports:
            - ${FIREBIRD_PORT}:3050
        volumes:
            - ./firebird/data/:/etc/firebird/3.0/
        environment:
            TZ: ${FIREBIRD_TIMEZONE}
            FIREBIRD_DATABASE: ${FIREBIRD_DBNAME}
            FIREBIRD_USER: ${FIREBIRD_USER}
            FIREBIRD_PASS: ${FIREBIRD_ISC_PASSWORD}
            ISC_PASSWORD: ${FIREBIRD_ISC_PASSWORD}
        tty: true
        networks:
            - default
            - webserver_network
    #----------------------------------------------------------------------------------------
    mysql-80:
        env_file: .env
        image: mysql:8.0
        container_name: mysql80
        ports:
            - ${MYSQL80_PORT}:3306
        volumes:
            - "./mysql-80/lib:/var/lib/mysql/"
        environment:
            MYSQL_DATABASE: ${MYSQL80_DATABASE}
            MYSQL_USERNAME: ${MYSQL80_USERNAME}
            MYSQL_PASSWORD: ${MYSQL80_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${MYSQL80_ROOT_PASSWORD}
    #----------------------------------------------------------------------------------------
    mysql-57:
        env_file: .env
        image: mysql:5.7
        container_name: mysql57
        ports:
            - ${MYSQL57_PORT}:3306
        volumes:
            - "./mysql-57/lib:/var/lib/mysql/"
        environment:
            MYSQL_DATABASE: ${MYSQL57_DATABASE}
            MYSQL_USERNAME: ${MYSQL57_USERNAME}
            MYSQL_PASSWORD: ${MYSQL57_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${MYSQL57_ROOT_PASSWORD}
    #----------------------------------------------------------------------------------------
#    sqlite3:
#        env_file: .env
#        container_name: sqlite3
#        build:
#            context: ./sqlite3
#        privileged: true
#        ports:
#            - ${SQLITE3_PORT}:5050
#        volumes:
#            - type: bind
#              source: ./sqlite3/sqliteDB/sqlite-autoconf
#              target: /data/sqlite3/
#              read_only: false
#            - type: bind
#              source: ./sqlite3/sqliteDB/databases
#              target: /root/db/
#              read_only: false
#        stdin_open: true
#        tty: true
#    #----------------------------------------------------------------------------------------
#    redis:
#        env_file: .env
#        container_name: redis
#        build:
#            context: ./redis
#        ports:
#            - ${REDIS_PORT}:6379
#        volumes:
#            - type: bind
#              source: ./redis/data
#              target: /data/
#              read_only: false
#            - type: bind
#              source: ./redis/redis.conf
#              target: /etc/redis/redis.conf
#              read_only: false
#        command: redis-server --requirepass ${REDIS_AUTH}
#        tty: true
#    #-----------------------------------------------------------------------------------------

networks:
    webserver_network:
        external: true

version: "3.7"
services:
    
    #----------------------------------------------------------------------------------------
    webserver:
        env_file: .env
        image: httpd:2.4.54
        container_name: webserver
        ports:
            - ${WEBSERVER_PORT1}:80
            - ${WEBSERVER_PORT2}:443
        privileged: true
        volumes:
            - ./webserver/:/home/webserver/
            - ./applications/:/var/www/webserver/
        tty: true
        depends_on:
            - php8
        links:
            - php8
        networks:
            - webserver_network
    #----------------------------------------------------------------------------------------
    php8:
        env_file: .env
        container_name: php8
        build:
            context: ./php8
            dockerfile: php8.dockerfile
        ports:
            - ${PHP8_PORT}:9000
        volumes:
            - ./applications/:/var/www/webserver/
        networks:
            - webserver_network
    #----------------------------------------------------------------------------------------
    # IMPORTANT:
    #   The builder of this container is very long and need a long time to finish correctly
    #   Use the command docker-compose up --build to run in first time
    #   After the first build use docker-compose up -d oraclelinux
    #
    # REQUIRED:
    #   Database file: LINUX.X64_193000_db_home.zip
    #   This file can be downloaded in https://www.oracle.com/database/technologies/oracle-database-software-downloads.html
    #
    # EDITION:
    #   ee - Enterprise Edition
    #   se2 - Standard Edition
    #   xe - Express Edition
    #
    # STEPS AFTER BUILD:
    #   - Set Password Administration
    #       HOST(your machine):
    #           docker exec -it oraclelinux ./setPassword.sh _YOUR_ORACLE_PASSWORD_
    #   - Access the database CLI
    #       HOST(your machine):
    #           docker exec -it oraclelinux /bin/bash
    #       GUEST(inside oraclelinux):
    #           sqlplus sys/_YOUR_ORACLE_PASSWORD_@ORCLPDB1 as sysdba
    #   - Create User
    #       GUEST(inside oraclelinux):
    #           CREATE USER DEVEL IDENTIFIED BY _YOUR_ORACLE_PASSWORD_;
    #           GRANT CREATE SESSION, CREATE TABLE TO devel;
    #           ALTER USER devel QUOTA 50m ON SYSTEM;
    #           CREATE SMALLFILE TABLESPACE DEVEL DATAFILE '/opt/oracle/oradata/ORCLCDB/ORCLPDB1/devel.dbf' SIZE 1G;
    #           ALTER DATABASE DEFAULT TABLESPACE DEVEL;
    #           SELECT * FROM ALL_USERS au;
    #           SELECT * FROM ALL_USERS au WHERE au.USERNAME = 'DEVEL';
    #           EXIT;
    #   - Connect on database using the new user
    #       GUEST(inside oraclelinux):
    #           sqlplus devel/_YOUR_ORACLE_PASSWORD_@ORCLPDB1;
    #           * Please see the details to connection from SGBD DBeaver in folder oracle/midias/DBeaver-Oracle-Connection-Details.png
    #
    # ** All rights reserved to ORACLE - oracle.com
    #
    oraclelinux:
        env_file: .env
        container_name: oraclelinux
        build:
            context: ./oracle/19.3.0
            args:
                DB_EDITION: ${DB_EDITION}
                ORACLE_PASSWORD: ${ORACLE_PASSWORD}
        volumes:
            - ./oracle/share:/home/oracle/share
            - ./oracle/oradata:/opt/oracle/oradata
        ports:
            - ${ORACLE_PORT1}:1521
            - ${ORACLE_PORT2}:5500
        tty: true
        networks:
            - default
            - webserver_network
    #----------------------------------------------------------------------------------------
    redis:
        env_file: .env
        container_name: redis
        build:
            context: ./redis
        ports:
            - ${REDIS_PORT}:6379
        volumes:
            - type: bind
              source: ./redis/data
              target: /data/
              read_only: false
            - type: bind
              source: ./redis/redis.conf
              target: /etc/redis/redis.conf
              read_only: false
        command: redis-server --requirepass ${REDIS_AUTH}
        tty: true
    #-----------------------------------------------------------------------------------------
    mongo:
        env_file: .env
        container_name: mongo
        image: mongo
        ports:
            - ${MONGO_PORT}:27017
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
        volumes:
            - type: bind
              source: ./mongo/MongoDB
              target: /data/db/
              read_only: false
            - type: bind
              source: ./mongo/mongod.conf
              target: /etc/mongod.conf
              read_only: false
        tty: true
    #----------------------------------------------------------------------------------------
    # Run this service manually in case of error or exception
    mongo-express:
        env_file: .env
        container_name: mongo-express
        image: mongo-express
        ports:
            - ${MONGO_EXPRESS_PORT}:8081
        environment:
            ME_CONFIG_MONGODB_SERVER: ${MONGO_EXPRESS_SERVER_DRIVER}
            ME_CONFIG_MONGODB_PORT: ${MONGO_EXPRESS_SERVER_PORT}
            ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_EXPRESS_SERVER_USERNAME}
            ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_EXPRESS_SERVER_PASSWORD}
            ME_CONFIG_MONGODB_URL: ${MONGO_EXPRESS_SERVER_URL}
            ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
            ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
        tty: true
        links:
            - mongo
        depends_on:
            - mongo
    #-----------------------------------------------------------------------------------------
    postgres:
        env_file: .env
        container_name: postgres
        image: postgres
        ports:
            - ${POSTGRES_PORT}:5432
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            TZ: GMT
        volumes:
            - type: bind
              source: ./postgres/PostgreSQL
              target: /var/lib/postgresql/data/
              read_only: false
        tty: true
    #----------------------------------------------------------------------------------------
    mssql:
        env_file: .env
        container_name: mssql
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
            - ${MSSQL_PORT}:1433
        volumes:
            - type: bind
              source: ./mssql
              target: /var/lib/mssql/data/
              read_only: false
            - type: bind
              source: ./mssql/data
              target: /var/opt/mssql/data/
              read_only: false
        environment:
            SA_PASSWORD: ${MSSQL_SA_PASSWORD}
            MSSQL_SA_PASSWORD: ${MSSQL_SA_PASSWORD}
            ACCEPT_EULA: ${MSSQL_ACCEPT_EULA}
            MSSQL_PID: ${MSSQL_EDITION}
            TRUSTED_CONNECTION: ${MSSQL_TRUSTED_CONNECTION}
        tty: true
    #----------------------------------------------------------------------------------------
    mssql-tools:
        env_file: .env
        container_name: mssql-tools
        image:  mcr.microsoft.com/mssql-tools
        ports:
            - ${MSSQL_TOOLS_PORT}:10000
        tty: true
    #----------------------------------------------------------------------------------------
    mysql-80:
        env_file: .env
        image: mysql:8.0
        container_name: mysql80
        ports:
            - "3706:3306"
        volumes:
            - "./mysql-80:/var/lib/mysql/"
        environment:
            MYSQL_DATABASE: ${MYSQL80_DATABASE}
            MYSQL_USERNAME: ${MYSQL80_USERNAME}
            MYSQL_PASSWORD: ${MYSQL80_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${MYSQL80_ROOT_PASSWORD}
    #----------------------------------------------------------------------------------------
    mysql-57:
        env_file: .env
        image: mysql:5.7
        container_name: mysql57
        ports:
            - ${MYSQL57_PORT}:3306
        volumes:
            - "./mysql-57:/var/lib/mysql/"
        environment:
            MYSQL_DATABASE: ${MYSQL57_DATABASE}
            MYSQL_USERNAME: ${MYSQL57_USERNAME}
            MYSQL_PASSWORD: ${MYSQL57_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${MYSQL57_ROOT_PASSWORD}
    #----------------------------------------------------------------------------------------
    sqlite3:
        env_file: .env
        container_name: sqlite3
        build:
            context: ./sqlite3
        privileged: true
        ports:
            - ${SQLITE3_PORT}:5050
        volumes:
            - type: bind
              source: ./sqlite3/sqliteDB/sqlite-autoconf
              target: /data/sqlite3/
              read_only: false
            - type: bind
              source: ./sqlite3/sqliteDB/databases
              target: /root/db/
              read_only: false
        stdin_open: true
        tty: true
    #----------------------------------------------------------------------------------------

networks:
    webserver_network:
        external: true
